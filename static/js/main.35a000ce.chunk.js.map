{"version":3,"sources":["components/Nav.js","components/Elements/Bar/index.js","components/Chart/index.js","components/Elements/Controls/index.js","components/Elements/ProgressBar/index.js","components/VisualArea/index.js","components/AlgoDescription/index.js","algorithms/helpers.js","algorithms/SelectionSort.js","algorithms/InsertionSort.js","algorithms/QuickSort.js","algorithms/BubbleSort.js","algorithms/HeapSort.js","algorithms/MergeSort.js","components/Elements/ColorKey/index.js","components/AlgoCodeBlocks/SelectionSort.js","components/AlgoCodeBlocks/InsertionSortCode.js","components/AlgoCodeBlocks/BubbleSortCode.js","components/AlgoCodeBlocks/QuickSortCode.js","components/AlgoCodeBlocks/MergeSortCode.js","components/AlgoCodeBlocks/HeapSortCode.js","components/AlgoCodeBlocks/index.js","App.js","reportWebVitals.js","index.js"],"names":["props","setNumber","e","setSize","parseInt","target","dataset","number","Navbar","bg","variant","expand","className","Brand","Toggle","aria-controls","Collapse","id","Nav","NavDropdown","onClick","setSort","title","Item","selectedAlgo","Divider","sortSelect","size","data-number","renderSizeOption","Bar","width","height","val","stateA","stateB","stateC","stateD","sorted","style","BarStyle","Chart","visState","maxNum","Math","max","array","map","num","index","length","margin","includes","sortedIndexes","marginRight","generateBars","Controls","speedSelectStat","speedSelectStatus","selectSpeed","speedSelect","pickedAlgo","repeat","backwardStatus","backward","playing","pause","color","playDisabled","step","play","resume","forwardStatus","forward","currentSpeed","ProgressBar","progress","console","log","VisualArea","data","RenderAlgoInfo","Quick","Selection","Bubble","Insertion","Merge","Heap","renderAlgoDesc","getInitState","arr","addToState","state","push","swap","i","j","tmp","lastSorted","createRange","start","end","Array","keys","elem","createKey","SelectionSortKey","SelectionSort","minIndex","InsertionSortKey","InsertionSort","key","QuickSortKey","QuickSort","recursiveQuickSort","pivot","floor","random","choosePivot","partition","BubbleSortKey","BubbleSort","HeapSortKey","HeapSort","maxHeapify","heapsize","leftChild","left","rightChild","right","largest","buildMaxHeap","heapSort","MergeSortKey","MergeSort","nums","recursiveMergeSort","original","midPoint","mid","slice","k","merge","ColorKey","colorKey","keySorted","keyA","keyB","keyC","keyD","SelectionSortCode","useEffect","Prism","highlightAll","InsertionSortCode","BubbleSortCode","QuickSortCode","MergeSortCode","HeapSortCode","DisplayCode","renderCode","App","ALGO_KEY","useState","selectedSort","setSelectedSort","setVisState","setSelectedAlgo","algoActions","setAlgoActions","setProgress","timeoutIds","setTimeoutIds","speed","setSpeed","currentStep","useRef","runAlgo","toIds","timer","forEach","item","timeoutId","setTimeout","current","clearTimeout","generateArray","fill","fixed","innerText","parseFloat","newState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.35a000ce.chunk.js","sourcesContent":["import React from 'react'\nimport { Navbar, Nav, NavDropdown, Form, FormControl, Button } from 'react-bootstrap'\nimport './style.css'\nexport default (props) => {\n  const setNumber = (e) =>{\n    props.setSize(parseInt(e.target.dataset.number));\n  }\n  const setSort = ()=>{\n    props.setSort();\n  }\n  const renderSizeOption = () => {\n    if (props.sortSelect) {\n      return (\n        <NavDropdown className='mr-4' title={\"Array Size:  \" + props.size} id=\"basic-nav-dropdown\">\n          <NavDropdown.Item data-number={10} onClick = {setNumber} >10</NavDropdown.Item>\n          <NavDropdown.Divider />\n          <NavDropdown.Item data-number={20} onClick = {setNumber} >20</NavDropdown.Item>\n          <NavDropdown.Divider />\n          <NavDropdown.Item data-number={50} onClick = {setNumber} >50</NavDropdown.Item>\n          <NavDropdown.Divider />\n          <NavDropdown.Item data-number={100} onClick = {setNumber} >100</NavDropdown.Item>\n          <NavDropdown.Divider />\n          <NavDropdown.Item data-number={200} onClick = {setNumber} >200</NavDropdown.Item>\n        </NavDropdown>\n      )\n    } \n  }\n  return (\n    <div>\n      <Navbar bg=\"light\" variant='light' expand=\"lg\" className='disabled'>\n        <Navbar.Brand>Algo Visualization</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"ml-auto\">\n            <NavDropdown className='mr-4' onClick={setSort} title=\"Sorting Algos\" id=\"basic-nav-dropdown\">\n              <NavDropdown.Item onClick = {props.selectedAlgo} >Bubble </NavDropdown.Item>\n              <NavDropdown.Divider />\n              <NavDropdown.Item onClick = {props.selectedAlgo} >Selection </NavDropdown.Item>\n              <NavDropdown.Divider />\n              <NavDropdown.Item onClick = {props.selectedAlgo} >Insertion </NavDropdown.Item>\n              <NavDropdown.Divider />\n              <NavDropdown.Item onClick = {props.selectedAlgo} >Merge </NavDropdown.Item>\n              <NavDropdown.Divider />\n              <NavDropdown.Item onClick = {props.selectedAlgo} >Quick </NavDropdown.Item>\n              <NavDropdown.Divider />\n              <NavDropdown.Item onClick = {props.selectedAlgo} >Heap </NavDropdown.Item>\n            </NavDropdown>\n\n            {renderSizeOption()}\n            \n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n    </div>\n  )\n}\n\n\n/*\n\nelse if (props.searchSelect) {\n      return (\n        <NavDropdown className='mr-4' title={\"Grid Size:  \" + props.size} id=\"basic-nav-dropdown\">\n          <NavDropdown.Item data-number={50} onClick = {setNumber} >50</NavDropdown.Item>\n          <NavDropdown.Divider />\n          <NavDropdown.Item data-number={100} onClick = {setNumber} >100</NavDropdown.Item>\n          <NavDropdown.Divider />\n          <NavDropdown.Item data-number={200} onClick = {setNumber} >200</NavDropdown.Item>\n          <NavDropdown.Divider />\n          <NavDropdown.Item data-number={400} onClick = {setNumber} >400</NavDropdown.Item>\n          <NavDropdown.Divider />\n          <NavDropdown.Item data-number={1000} onClick = {setNumber} >1000</NavDropdown.Item>\n        </NavDropdown>\n      )\n    }\n\n                <NavDropdown className='mr-4' title=\"Seaching Algos\" id=\"basic-nav-dropdown\">\n              <NavDropdown.Item >Breadth-First-Search</NavDropdown.Item>\n              <NavDropdown.Divider />\n              <NavDropdown.Item >Depth-First-Search</NavDropdown.Item>\n              \n            </NavDropdown>\n*/","import React from 'react'\nimport './style.css'\nconst Bar = ({width, height, val, stateA, stateB, stateC, stateD, sorted, style}) => {\n  let className = 'Bar';\n  if (sorted){\n    className += ' Bar_sorted';\n  }\n  if (stateD) {\n    className += ' Bar_stateD';\n  }else if (stateC){\n    className += ' Bar_stateC';\n  }else if (stateB){\n    className += ' Bar_stateB';\n  }else if (stateA){\n    className += ' Bar_stateA';\n  }\n  let BarStyle = {...style, width:`${width}%`, height:`${height}%`}\n  if (stateA || stateB || stateC || stateD){  //any other state other than sorted.\n    BarStyle['marginRight'] = `${0.3 * width}%`;\n    BarStyle['marginLeft'] = `${0.3 * width}%`;\n  }\n  return (\n    <div style={BarStyle} className={className}>\n      <span>{val}</span>\n    </div>\n  )\n}\n\nexport default Bar\n","import React, { useState } from 'react'\nimport './style.css'\nimport Bar from '../Elements/Bar'\nfunction Chart(props) {\n  const generateBars = ()=>{\n    if (!props.visState){\n      return null;\n    }\n    let maxNum = Math.max(...props.visState.array);\n    let array = props.visState.array;\n    return array.map((num, index)=>{\n            let width = 100/array.length;  //what is the function for the width?\n            let height = num / maxNum * 100;\n            let margin = index === array.length ? '0' : width > 3 ? '0.5rem' : '0.125rem';            let stateA = props.visState.stateA.includes(index);\n            let stateB = props.visState.stateB.includes(index);\n            let stateC = props.visState.stateC.includes(index);\n            let stateD = props.visState.stateD.includes(index);\n            let sorted = props.visState.sortedIndexes.includes(index);\n            \n            return (\n              <Bar \n                key={index} \n                val={width >=5 ? num : null}\n                width={width}\n                height={height}\n                style= {{marginRight: `${margin}`}}\n                stateA = {stateA}\n                stateB = {stateB}\n                stateC = {stateC}\n                stateD = {stateD}\n                sorted = {sorted}\n              />\n            )\n          })\n  }\n  return (\n    <div className = 'Chart'>\n      {generateBars()}\n    </div>\n  )\n}\n\nexport default Chart\n","import React from 'react'\n\nimport {\n  MdPlayCircleFilled as Play,\n  MdPause as Pause,\n  MdSkipNext as Next,\n  MdSkipPrevious as Previous,\n  MdRepeat as Repeat,\n} from 'react-icons/md';\nimport './style.css'\n\nexport default function Controls(props) {\n  const playOrResume = () =>{\n    if (props.playDisabled){\n      return;\n    }else if (props.step === -1){  //Hmm maybe here\n      props.play()\n    }else {\n      props.resume();\n    }\n  }\n  const pauseVis = ()=>{\n    props.pause();\n  }\n  const buttonStatus = ()=>{\n    if (props.playDisabled){\n      return 'disabled'\n    }else {\n      return 'enabled'\n    }\n  }\n  const forwardStatus = ()=>{\n    if (props.forwardStatus){\n      return 'enabled';\n    }else {\n      return 'disabled';\n    }\n  }\n  const backwardStatus = ()=>{\n    if (props.backwardStatus){\n      return 'enabled';\n    }else {\n      return 'disabled';\n    }\n  }\n  const forward = ()=>{\n    if (props.forwardStatus){\n      props.forward()\n    }else {\n      return;\n    }\n  }\n  const backward = ()=>{\n    if (props.backwardStatus){\n      props.backward()\n    }else {\n      return;\n    }\n  }\n  const speedSelectStat = ()=>{\n    if (props.speedSelectStatus){\n      //disable it!\n      return 'disabled';\n    }else {\n      return 'enabled';\n    }\n  }\n\n  const selectSpeed = (e) =>{\n    if (speedSelectStat() === 'disabled'){\n      return;\n    }else {\n      props.speedSelect(e);\n    }\n  }\n\n  const repeatStatus = ()=>{\n    if (props.pickedAlgo){\n      return 'enabled'\n    }else {\n      return 'disabled'\n    }\n  }\n  const repeat = ()=>{\n    if (props.pickedAlgo){\n      props.repeat();\n    }else {\n      return;\n    }\n  }\n  return (\n    <div className=\"VisControls\">\n      <Repeat onClick = {repeat} className={`button repeat-button repeat-button-${repeatStatus()}`}/>\n      <Previous onClick={backward} className={`button increment-button backward-${backwardStatus()}`}/>\n      {props.playing ? <Pause onClick = {pauseVis}color=\"#ff94c2\" className=\"button\"/> : <Play onClick = {playOrResume} className = {`button button-${buttonStatus()}`}/>}\n      <Next onClick={forward} className={`button increment-button forward-${forwardStatus()}`}/>\n      <div className=\"dropdown\">\n        <button className={`dropbtn dropbtn-${speedSelectStat()}`}>{props.currentSpeed}x</button>\n        <div className=\"dropdown-content\">\n          <a onClick = {selectSpeed}>0.25x</a>\n          <a onClick = {selectSpeed}>0.5x</a>\n          <a onClick = {selectSpeed}>1x</a>\n          <a onClick = {selectSpeed}>2x</a>\n          <a onClick = {selectSpeed}>4x</a>\n        </div>\n      </div>\n      \n    </div>\n  )\n}\n","import React from 'react';\nimport './style.css';\nfunction ProgressBar({progress}) {\n  console.log('progress in progress bar', progress)\n  return (\n    <div className = \"ProgressBar\">\n      <div className = \"ProgressBar_Active\" style = {{width: `${progress}%`}}>\n      </div>\n    </div>\n  )\n}\n\nexport default ProgressBar\n","import React from 'react'\nimport './style.css'\nimport Chart from '../Chart'\nimport Controls from '../Elements/Controls'\nimport ProgressBar from '../Elements/ProgressBar'\nfunction VisualArea(props) {\n  console.log('props in VisualArea', props.data);\n  return (\n    <div className='VisualWindow'>\n      <Chart visState={props.data} />\n      <ProgressBar width = {props.width} progress = {props.progress}/>\n    </div>\n  )\n}\n\nexport default VisualArea\n","import React from 'react';\nimport {Row, Col} from 'react-bootstrap';\nimport './style.css';\n\n\nexport default function RenderAlgoInfo(props) {\n  console.log(props)\n  const Quick = () => {\n    return (\n      <div className='Info'>\n        <hr />\n        <h2>{props.selectedAlgo + ' Sort'}</h2>\n        <div className=\"InfoBody\">\n          <div className='Description'>\n              Quick Sort(link) is an in-place, Divide and Conqur sorting algorithm.  It picks an element as pivot and partitions the given array around the picked pivot.  After the partition step, the elements smaller than the pivot lies to the left and the elements greater than the pivot lies to the right.  Therefore, after the partitioning step, the pivot is in the correct spot.  The steps of the quickSort is summarized as follows:\n              \n              <ol>\n                <li>Pick a pivot element (demo code picks the end).</li>\n                <li>Partitioning: all elements with values less than pivot come before, while all elements with values greater than pivot come after.  The mechanic is simple.  We have indexes i and j.  Index i points at an element that is one before the element that is greater than the pivot.  Index j is the traversing index.  When element at index j is smaller than the pivot, we increment index i by 1 and swap elements are index i and j, keeping all elements smaller than pivot on the left and all elements greater than pivot on the right.</li>\n                <li>Recursively apply the above steps to the left half and right half of the subarrays.</li>\n              </ol>\n          </div>  \n          <div className='Complexity'>\n              <h4>Performance</h4>\n              <p>Space Complexity is O(1) because of the in-place nature of the algorithm.</p>\n              <p>Time Complexity:</p>\n              <ul>\n                <li>Worst-case: O(n^2), occurs when the array is already sorted.  If the array is already sorted, and we always pick the last element as pivot, then each recursive call processes an array of size one less than the previous list.  Consequently, we have a partial sum of (n-i) for i=0 to n, which is a O(n^2) algorithm.</li>\n                <li>Best-case: O(n * log n), occurs when the partition divide the list into two equal pieces.  Then we have a call tree that is of height log(n) and on each level, we do n work.  </li>\n                <li>Average-case: O(n * log n), this can be derived from its recurrence relations of its best and worst case and applying master theorem for divide and conquer. </li>\n              </ul>\n          </div>\n        </div>\n      </div>\n    )\n  };\n  const Selection = ()=>{\n    \n    return (\n      <div className='Info'>\n        <hr/>\n        <h2>{props.selectedAlgo + ' Sort'}</h2>\n        <div className=\"InfoBody\">\n          <div className='Description'>\n              Selection Sort sorts the array by repeatedly finding the minimium element from the unsorted part and putting it at the beginning.  The steps of the algorithm can be summarized as follows:\n              <ol>\n                <li>Iterate through the array, find the smallest element and swap it with the first element.</li>\n                <li>Repeat the previous step to find the second smallest and so on until the array is sorted.</li>\n              </ol>\n          </div>  \n          <div className='Complexity'>\n              <h4>Performance</h4>\n              <p>Space Complexity is O(1) because of the in-place nature of the algorithm.</p>\n              <p>Time Complexity:</p>\n              <ul>\n                <li>O(n^2) is the time complexity as there are two nested loops.</li>\n              </ul>\n          </div>\n        </div>\n      </div>\n    )\n  };\n  const Bubble = ()=>{\n    return (\n      <div className='Info'>\n        <hr/>\n        <h2>{props.selectedAlgo + ' Sort'}</h2>\n        <div className=\"InfoBody\">\n          <div className='Description'>\n              Bubble Sort works by repeatedly swapping the adjacent elements if they are in wrong order.  The pass through the array is repeated until the array is in sorted order.  \n          </div>  \n          <div className='Complexity'>\n              <h4>Performance</h4>\n              <p>Space Complexity is O(1) because of the in-place nature of the algorithm.</p>\n              <p>Time Complexity:</p>\n              <ul>\n                <li>Worst-case is O(n^2) because of the nested loops.  This occurs when the array is reverse sorted</li>\n                <li>Best-case is O(n) and this occurs when the array is already sorted.</li>\n              </ul>\n          </div>\n        </div>\n      </div>\n    )\n  };\n  \n  const Insertion = ()=>{\n    return (\n      <div className='Info'>\n        <hr/>\n        <h2>{props.selectedAlgo + ' Sort'}</h2>\n        <div className=\"InfoBody\">\n          <div className='Description'>\n              Insertion sort is a simple sorting algorithm that works similar to the way you sort playing cards in your hands. The array is virtually split into a sorted and an unsorted part. Values from the unsorted part are picked and placed at the correct position in the sorted part.  The steps of the code can be summarized as follows:\n              <ol>\n                <li>Use an outer loop to iterate through the array using an index i.</li>\n                <li>Use an inner loop and start an index j with an initial value of i.</li>\n                <li>Move the value at j to the left(sorted) portion of the array, continously swapping elements if the value at j is less than the value at j-1.  When this step is finished, the value the algorithm attempts to insert originally lies in its correct location.</li>\n              </ol>\n          </div>  \n          {/* Talk about the performance nature of this! */}\n          <div className='Complexity'>\n              <h4>Performance</h4>\n              <p>Space Complexity is O(1) because of the in-place nature of the algorithm.</p>\n              <p>Time Complexity:</p>\n              <ul>\n                <li>O(n^2) is the time complexity as there are two nested loops.</li>\n              </ul>\n          </div>\n        </div>\n      </div>\n    )\n  };\n  \n  const Merge = ()=>{\n    return (\n      <div className='Info'>\n        <hr/>\n        <h2>{props.selectedAlgo + ' Sort'}</h2>\n        <div className=\"InfoBody\">\n          <div className='Description'>\n              Merge Sort is a Divide and Conquer algorithm. It divides the input array into two halves, calls itself for the two halves, and then merges the two sorted halves. The merge() function is used for merging two halves. The merge(arr, l, m, r) is a key process that assumes that arr[l..m] and arr[m+1..r] are sorted and merges the two sorted sub-arrays into one.  The code to Merge Sort can be summerized as follows:\n              \n              <ol>\n                <li>Find the mid point to divide the array: mid = left + (right-1)/2</li>\n                <li>Call mergeSort on the left half: mergeSort(arr, left, mid)</li>\n                <li>Call mergeSort on the right half: mergeSort(arr, mid+1, right)</li>\n                <li>Merge the two previously sorted halves by calling merge(arr, left, mid, right)</li>\n              </ol>\n          </div>  \n          <div className='Complexity'>\n              <h4>Performance</h4>\n              <p>Space Complexity is O(1) because of the in-place nature of the algorithm.</p>\n              <p>Time Complexity:</p>\n              \n              <p>The algorithm divides the array into halves on each recursive calls.  Therefore, we have Log(n) number of levels and for each level, we do linear amount of work(merge).  So in total, it takes O(n Log n) time.</p>\n          </div>\n        </div>\n      </div>\n    )\n  }\n  \n  const Heap = ()=>{\n    return (\n      <div className='Info'>\n        <hr/>\n        <h2>{props.selectedAlgo + ' Sort'}</h2>\n        <div className=\"InfoBody\">\n          <div className='Description'>\n              Heap sort is a comparison-based sorting technique based on Binary Heap data structure.  When given an arbitrary array, Heap Sort construct a Min/Max Heap by shifting the elements in the array so that a value in a parent node is smaller than the values in its two children nodes.  Then the order of the array comes by repeatedly removing the first element of the array and re-heapifying the array.  The steps of Heap Sort can be summarized as follows:\n  \n              <ul>\n                <li>Build a min heap from the input array.</li>\n                <li>The smallest item is stored at the root(first index of array) of the heap.  Replace it with the last item of the heap followed by reducing the size of the heap by 1.</li>\n                <li>Re-heapify the root of the tree.</li>\n                <li>Repeat the above two steps.</li>\n              </ul>\n          </div>  \n          <div className='Complexity'>\n              <h4>Performance</h4>\n              <p>Space Complexity is O(1) because of the in-place nature of the algorithm.</p>\n              <p>Time Complexity:</p>\n              <ul>\n                <li>Worst-case is O(n^2) because of the nested loops.  This occurs when the array is reverse sorted</li>\n                <li>Best-case is O(n) and this occurs when the array is already sorted.</li>\n              </ul>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  const noAlgo = ()=>{\n    return (\n      <div className='Info'>\n        <hr />\n        <h2>Select algorithm</h2>\n        <p>You must select an algorithm before you can see its description and time/space performances. </p>\n      </div>\n    )\n  }\n  //simply write a separate function for when there is no selectedAlgo props.\n  const render = () => {\n    return (\n      <>\n        {props.selectedAlgo ?  renderAlgoDesc() : noAlgo()}\n      </>\n    )\n  }\n  const renderAlgoDesc = ()=>{\n    switch (props.selectedAlgo) {\n      case 'Quick':\n        return <Quick />\n      case 'Insertion':\n        return <Insertion />\n      case 'Selection':\n        return <Selection />\n      case 'Merge':\n        return <Merge />\n      case 'Bubble':\n        return <Bubble />\n      case 'Heap':\n        return <Heap />\n      default:\n        return (<h1>Please select an algorithm</h1>)\n    }\n    \n  }   \n  return (\n    <div>\n      {render()}\n      \n    </div>\n    \n  )\n}\n\n","export const getInitState = (arr) =>{  //this simply returns the init state of the algo viz\n  return [{\n    array: [...arr],\n    stateA: [],\n    stateB: [],\n    stateC: [],\n    stateD: [],\n    sortedIndexes: []\n  }]\n}\n\nexport const addToState = (\n  state,\n  array,\n  sortedIndexes = [],  //if no value is provided, then its the empty array\n  stateA = [],  //fourth parameter is stateA\n  stateB = [],  //fifth parameter is stateB\n  stateC = [],\n  stateD = [],\n) =>{\n  state.push({\n    array: [...array],\n    stateA: [...stateA],\n    stateB: [...stateB],\n    stateC: [...stateC],\n    stateD: [...stateD],\n    sortedIndexes: [...sortedIndexes]\n  })\n}\n\nexport const swap = (array, i, j)=>{\n  const tmp = array[i];\n  array[i] = array[j];\n  array[j] = tmp;\n}\n\nexport const lastSorted = (state) =>{\n  return state[state.length-1].sortedIndexes;  //last element in state and the sortedIndexes property (we retrieve the entire array)\n}\nexport const createRange = (start, end)=>{\n  return [...Array(end-start).keys()].map((elem)=>{\n    return elem+start;\n  })\n}\nexport const createKey = (stateA, stateB, stateC, stateD)=>{\n  return { stateA, stateB, stateC, stateD }\n}","import React from 'react';\nimport {swap, getInitState, addToState, lastSorted, createKey } from './helpers'\n\nconst SelectionSort = (array)=>{\n  const state = getInitState(array);\n\n  //core of Selection Sort:\n  for (let i = 0; i < array.length - 1; i++){\n    let minIndex = i;\n    for (let j = i+1; j< array.length; j++){\n      addToState(state, array, lastSorted(state), [minIndex, j]);  //comparing minIndex and j\n      if (array[j] < array[minIndex]){  //we found a smaller value\n        addToState(state, array, lastSorted(state), [minIndex], [j]);  //So [j] is stateB, which means in this case, we found a smaller value (it is in the array stateB)\n        minIndex = j;  //update minIndex\n        addToState(state, array, lastSorted(state), [minIndex], [j]);  //minIndex(so far) is kept in this stateA.\n      }\n    }\n    //ok so at this point, we found the smallest element and it lies in the stateA array.  Now add the swap action to the state array.  The swap indexes lie in the second stateB array.\n    addToState(state, array, lastSorted(state), [], [i, minIndex]);\n\n    swap(array, i, minIndex);\n    //values been swapped, and sorted index added to the sorted array\n    addToState(state, array, [...lastSorted(state), i], [], []);  \n  }\n  //final item is sorted\n  addToState(state, array, [...lastSorted(state), array.length-1]);\n  return state;\n}\n\nexport const SelectionSortKey = createKey('Comparing', 'Swapping');\n\nexport default SelectionSort;","import React from 'react'\nimport {swap, getInitState, addToState, lastSorted, createKey } from './helpers'\n\nconst InsertionSort = (array) => {\n  //initial state\n  const state = getInitState(array);\n  \n  //Algorithm\n  for (let i = 1; i < array.length; i++){\n    var key = array[i];\n    var j = i;\n    addToState(state, array, [], [i]);  //4th parameter is comparing\n    while(j>0 && array[j-1] > key){\n      //move the value at index j-1 one to the right\n      addToState(state, array, [], [j], [j-1]);\n      array[j] = array[j-1];\n      j--;\n      //overwrite value at j with j-1\n      addToState(state, array, [], [], [j, j-1]);\n    }\n    //finally value at index j is overwritten by key\n    addToState(state, array, [], [], [], [j]);\n    array[j] = key;\n  }\n  addToState(state, array, [...Array(array.length).keys()]);\n  return state;\n}\n\nexport const InsertionSortKey = createKey(\n  'Comparing',\n  'Swapping',\n  'Overwrite from memory'\n);\n\nexport default InsertionSort\n","import React from 'react'\nimport {swap, getInitState, addToState, lastSorted, createKey, createRange } from './helpers'\nfunction QuickSort(array) {\n  const state = getInitState(array);  \n  function choosePivot(array, start, end){  \n    return Math.floor(Math.random()*(end-start) + start)\n  }\n\n  const partition = (array, start, end) =>{  \n    let i = start + 1;  \n    let j = start + 1;\n    addToState(state, array, lastSorted(state), [start]);  \n    while(j<=end){  \n      if (array[j] < array[start]){  \n        \n        addToState(state, array, lastSorted(state), [start], [j], [], createRange(start+1, i));  \n        swap(array, i, j);\n        addToState(state, array, lastSorted(state), [start], [i], [], createRange(start+1, i));\n        i +=1; \n      }\n      j+=1;  \n    }\n    addToState(state, array, lastSorted(state), [i-1], [], [], createRange(start, i-1));\n    swap(array, start, i-1);\n    addToState(state, array, lastSorted(state), [i-1], [], [], createRange(start, i-1));\n    return i-1;  \n  };\n  const recursiveQuickSort= (array, start, end) => {\n    if (start >= end){\n      if (start === end){\n        addToState(state, array, [...lastSorted(state), start]);\n      }\n      return null;\n    }\n    let pivot = choosePivot(array, start, end);\n    addToState(state, array, lastSorted(state), [pivot]);\n    swap(array, start, pivot);\n    addToState(state, array, lastSorted(state), [pivot]);\n    pivot = partition(array, start, end);\n    addToState(state, array, [...lastSorted(state), pivot])\n    recursiveQuickSort(array, start, pivot-1);\n    recursiveQuickSort(array, pivot+1, end);\n  }\n  recursiveQuickSort(array, 0, array.length-1);\n  return state;\n\n}\n\nexport const QuickSortKey = createKey(\n  'Comparing',\n  'Swapping',\n  null,\n  'Less than pivot'\n);\n\nexport default QuickSort\n","import React from 'react'\nimport {swap, getInitState, addToState, lastSorted, createKey } from './helpers'\n\nfunction BubbleSort(array) {\n  const state = getInitState(array);\n  for (let i = 0; i < array.length; i++){\n    for (let j = 0; j < array.length-i-1; j++){\n      //lastSorted is the last element in the state array.\n      addToState(state, array, lastSorted(state), [j, j+1]);\n      if (array[j] > array[j+1]){  //note this compares two adjacent indexes and index j is always the larger of the two after the swap.  \n        swap(array, j, j+1);  \n        addToState(state, array, lastSorted(state), [], [j, j+1]);\n      }\n    }\n    //When we are here, then index j is at the proper place\n    addToState(state, array, [...lastSorted(state), array.length-1-i]);  //third parameter is the sorted indexes\n  }\n\n  return state;\n}\n\nexport const BubbleSortKey = createKey('Comparing', 'Swapping');\n\nexport default BubbleSort\n","import React from 'react'\nimport {swap, getInitState, addToState, lastSorted, createKey, createRange } from './helpers'\n\nfunction HeapSort(array) {\n  const state = getInitState(array);\n  const left = (i) => 2 * i + 1;  //this syntax returns the result automatically\n  const right = (i) => 2 * i + 2;\n  const parent = (i) => Math.floor((i-1)/2);\n\n  const maxHeapify = (arr, i, heapsize) =>{  //i is the index of violation\n    const leftChild = left(i);\n    const rightChild = right(i);\n    addToState(state, arr, lastSorted(state), [i, leftChild]);\n    let largest = leftChild < heapsize && arr[leftChild] > array[i] ? leftChild : i;\n\n    addToState(state, arr, lastSorted(state), [largest, rightChild]);\n\n    largest = rightChild < heapsize && arr[rightChild] > arr[largest] ? rightChild : largest;\n\n    if (largest != i){\n      //highlights the two indexes to be swapped\n      addToState(state, arr, lastSorted(state), [], [i, largest]);\n      swap(arr, i, largest);\n      //highlight the two indexes after the swap.\n      addToState(state, arr, lastSorted(state), [], [i, largest]);\n      maxHeapify(array, largest, heapsize);\n    }\n  }\n\n  //a build maxheap function here\n  const buildMaxHeap = (array) =>{\n    const start = Math.floor(array.length / 2);\n    const heapsize = array.length;\n    for (let i = start; i>= 0; i--){\n      maxHeapify(array, i, heapsize);\n    }\n    //visualize the maxheap\n    addToState(state, array, lastSorted(state), [], [], [], createRange(0, array.length));\n  }\n  const heapSort = (array) =>{\n    buildMaxHeap(array);  //build the initial maxheap\n    let heapsize = array.length;\n    for (let i = array.length-1; i>0; i--){\n      //select max and last element to be swapped\n      addToState(state, array, lastSorted(state), [], [0, i]);  \n      swap(array, 0, i);\n      heapsize-=1;  //decrease the size of the heap by one, since max was selected\n      maxHeapify(array, 0, heapsize);  //create a heap out of the violation at index 0\n      addToState(state, array, lastSorted(state), [], [], [], createRange(0, heapsize))\n    }\n    addToState(state, array, [...lastSorted(state), 0]);  //all is sorted.\n  }\n\n  heapSort(array);\n  return state;\n}\n\nexport const HeapSortKey = createKey(\n  'Comparing',\n  'Swapping',\n  null,\n  'Heap Built'\n);\n\nexport default HeapSort\n","import React from 'react'\nimport {swap, getInitState, addToState, lastSorted, createKey, createRange } from './helpers'\n\nconst MergeSort = (nums) => {\n  // Initial State\n  const state = getInitState(nums);\n\n  function merge(original, start, mid, end) {\n    const left = original.slice(start, mid);\n    const right = original.slice(mid, end);\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    while (i < left.length && j < right.length) {\n      if (left[i] <= right[j]) {\n        addToState(state, original, [], [], [], [k + start]);\n        original[k + start] = left[i];\n        i++;\n        addToState(state, original, [], [], [], [k + start]);\n      } else {\n        addToState(state, original, [], [], [], [k + start]);\n        original[k + start] = right[j];\n        j++;\n        addToState(state, original, [], [], [], [k + start]);\n      }\n      k++;\n    }\n    while (i < left.length) {\n      addToState(state, original, [], [], [], [k + start]);\n      original[k + start] = left[i];\n      i++;\n      k++;\n      addToState(state, original, [], [], [], [k + start]);\n    }\n    while (j < right.length) {\n      addToState(state, original, [], [], [], [k + start]);\n      original[k + start] = right[j];\n      j++;\n      k++;\n      addToState(state, original, [], [], [], [k + start]);\n    }\n\n    left.length = 0;\n    right.length = 0;\n  }\n\n  function recursiveMergeSort(original, start, end) {\n    const length = end - start;\n    if (length < 2) {\n      // original = []\n      if (length < 1) return original;\n      // original = [x]\n      else return [original[start]];\n    }\n\n    const midPoint = Math.floor((start + end) / 2);\n\n    // Visualize: First Half\n    addToState(\n      state,\n      original,\n      [],\n      [...Array(midPoint - start).keys()].map((i) => i + start)\n    );\n    recursiveMergeSort(original, start, midPoint);\n\n    // Visualize: Second Half\n    addToState(\n      state,\n      original,\n      [],\n      [...Array(end - midPoint).keys()].map((i) => i + midPoint)\n    );\n    recursiveMergeSort(original, midPoint, end);\n\n    merge(original, start, midPoint, end);\n  }\n\n  recursiveMergeSort(nums, 0, nums.length);\n\n  // Visualize: Mark all elements as sorted\n  addToState(state, nums, [...Array(nums.length).keys()]);\n  return state;\n};\n\nexport const MergeSortKey = createKey(\n  'Call Merge Sort',\n  null,\n  'Overwrite from axillary array'\n);\n\nexport default MergeSort\n","import React from 'react'\nimport './style.css'\nexport default function ColorKey(props) {\n  //console.log({...props.colorKey})\n  const {stateA, stateB, stateC, stateD} = {...props.colorKey};\n  //console.log(stateA, 'this is in the color key component')\n  const keySorted = stateA || stateB || stateC || stateD ? (<div className=\"ColorKey_Item\">\n    <div className=\"ColorKey_Box ColorKey_Sorted\"> </div>\n    <span>Sorted</span>\n  </div>) :(<div className=\"ColorKey_Item\">\n    <div className=\"\">\n      <span>***select an algorithm to see color keys</span>\n    </div>\n  </div>);\n\n  const keyA = stateA ? (<div className=\"ColorKey_Item\">\n    <div className=\"ColorKey_Box ColorKey_StateA\">\n    </div>\n    <span className=\"text\">{stateA}</span>\n  </div>) : null;\n\n  const keyB = stateB ? (<div className=\"ColorKey_Item\">\n  <div className=\"ColorKey_Box ColorKey_StateB\">\n  </div>\n  <span>{stateB}</span>\n  </div>) : null;\n\n  const keyC = stateC ? (<div className=\"ColorKey_Item\">\n  <div className=\"ColorKey_Box ColorKey_StateC\">\n  </div>\n  <span>{stateC}</span>\n  \n  </div>) : null;\n\n  const keyD = stateD ? (<div className=\"ColorKey_Item\">\n  <div className=\"ColorKey_Box ColorKey_StateD\">\n  </div>\n    <span>{stateD}</span>\n  \n  </div>) : null;\n\n  return (\n    <div className = \"ColorKeys\">\n      {keySorted}\n      {keyA}\n      {keyB}\n      {keyC}\n      {keyD}\n    </div>\n  )\n}\n","import React, {useEffect} from 'react'\nimport Prism from 'prismjs'\nimport './style.css'\n\nfunction SelectionSortCode() {\n  useEffect(() => {\n    Prism.highlightAll();\n  })\n  return (\n    <div className =\"codeBlock\">\n      <hr/>\n      <h3>Code:</h3>\n      <pre>\n        <code className=\"language-javascript\">\n            {\n            `function selectionSort(arr) \n{\n  for (var i = 0; i < arr.length; i++)\n  {\n    let minIndex = i;\n    for (var j = i+1; j < arr.length; j++){\n      //find the minIndex for each iteration\n      if (arr[j] < arr[minIndex]){\n        minIndex = j;\n      }\n    }\n    //switch the current i value with the value in the minIndex\n    let temp = arr[i];\n    arr[i] = arr[minIndex];\n    arr[minIndex] = temp;\n  }\n}`\n          }\n        </code>\n      </pre>\n    </div>\n  )\n}\n\nexport default SelectionSortCode\n\n","import React, {useEffect} from 'react'\nimport Prism from 'prismjs'\nimport './style.css'\n\nfunction InsertionSortCode(props) {\n  useEffect(() => {\n    Prism.highlightAll();\n  })\n  return (\n    <div className =\"codeBlock\">\n      <hr/>\n      <h3>Code:</h3>\n      <pre>\n        <code className=\"language-javascript\">\n            {\n`function insertionSort(arr, n) { \n  var i, key, j;  //key stores the value of the current index\n  for (i = 1; i < n; i++){ \n    key = arr[i]; \n    j = i - 1; \n    /* Move elements of arr[0..i-1], that are greater than \n    key one position to the right their current position */\n    while (j >= 0 && arr[j] > key){ \n      arr[j + 1] = arr[j]; \n      j = j - 1; \n    } \n    arr[j + 1] = key;  //key is now at its sorted position\n  } \n} `\n  }\n        </code>\n      </pre>\n    </div>\n  )\n}\n\nexport default InsertionSortCode\n","import React, { useEffect } from 'react'\nimport Prism from 'prismjs'\nimport './style.css'\nfunction BubbleSortCode() {\n  useEffect(() => {\n    Prism.highlightAll();\n  })\n  return (\n    <div className =\"codeBlock\">\n      <hr/>\n      <h3>Code:</h3>\n      <pre>\n        <code className=\"language-javascript\">\n            {\n            `function bubbleSort(arr) \n{\n  for (var i = 0; i < arr.length-1; i++)\n  {\n    //Compare indexes j and j+1 and move the larger of the two to the right\n    for (j = 0; j < arr.length - i - 1; j++){  \n      if (arr[j] > arr[j+1]){  \n        swap(arr, j, j+1);\n      }\n    }\n    //Since the larger of j and j+1 is always moved to the right, \n    //index j (before exiting of the for-loop) is the largest of the array\n  }\n}`\n          }\n        </code>\n      </pre>\n    </div>\n  )\n}\n\nexport default BubbleSortCode\n","import React, { useEffect } from 'react'\nimport Prism from 'prismjs'\nimport './style.css'\n//Look up java code for the quicksort algo with Random pivot.  Link is saved in chrome and translate that algo to here.\nfunction QuickSortCode() {\n  useEffect(() => {\n    Prism.highlightAll();\n  })\n  return (\n    <div className =\"codeBlock\">\n      <hr/>\n      <h3>Code:</h3>\n      <pre>\n        <code className=\"language-javascript\">\n            {\n`function pickRandomPivot(arr, low, high){\n  let pivotIndex = Math.floor(Math.random()*(high-low+1)+low)\n  let temp = arr[pivotIndex];\n  arr[pivotIndex] = arr[high];\n  arr[high] = temp;\n}\n\nfunction partition(arr, low, high){\n  //pick a random pivot and switch that element with high\n  pickRandomPivot(arr, low, high);\n  let pivot = arr[high];  //set the pivot\n  //index of smaller element than pivot, initially it is set to be a trivial index\n  let i = (low -1);  \n  for (var j = low; j < high; j++){  //strictly less than because at the end, \n    //we found the proper spot for index high\n    if (arr[j] < pivot){\n      i++;\n      //switch the smaller element to the left side.\n      var temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp\n    }\n    \n  }\n  //move pivot to the correct spot:\n  var temp = arr[i+1];\n  arr[i+1] = arr[high];\n  arr[high] = temp;\n  return i+1;\n}\n\nfunction quickSort(arr, low, high){\n  if (low < high){\n    var pivot = partition(arr, low, high);\n    quickSort(arr, low, pivot-1);\n    quickSort(arr, pivot+1, high);\n  }\n}`\n          }\n        </code>\n      </pre>\n    </div>\n  )\n}\n\n\nexport default QuickSortCode\n","import React, { useEffect } from 'react'\nimport Prism from 'prismjs'\nimport './style.css'\nfunction MergeSortCode() {\n  useEffect(() => {\n    Prism.highlightAll();\n  })\n  return (\n    <div className =\"codeBlock\">\n      <hr/>\n      <h3>Code:</h3>\n      <pre>\n        <code className=\"language-javascript\">\n            {\n`function merge(arr, l, m, r){  //l is left index, m is \n  //m is calculated by m = l + (r-1)/2\n  //sizes of the two arrays:\n  var leftSize = new Array(m-l+1);  \n  var rightSize = new Array(r-m); \n  var left = new Array(leftSize);\n  var right = new Array(rightSize);\n  for (var i = 0; i < leftSize; i++){\n    left[i] = arr[l+i];\n  }\n  for (var j = 0; j<rightSize; j++){\n    right[j] = arr[1+m+j];  //copy the right half of arr\n  }\n  var i = 0;  \n  var j = 0;\n  var k = l; //initial index of merged subarray\n  while(i<leftSize && j < rightSize){\n    if (left[i] <= right[j]){\n      arr[k] = left[i];\n      i++;\n    }else {\n      arr[k] = right[j];\n      j++\n    }\n    k++;\n  }\n  while(i < leftSize){\n    arr[k] = left[i];\n    k++;\n    i++;\n  }\n  while(j < rightSize){\n    arr[k] = right[j];\n    j++;\n    k++;\n  }\n}\n\nfunction mergeSort(arr, l, r){\n  if (l >= r){\n    return;\n  }\n  var m = l + parseInt((r-l)/2);\n  mergeSort(arr, l, m);\n  mergeSort(arr, m+1, r);\n  merge(arr, l, m, r);\n}`\n          }\n        </code>\n      </pre>\n    </div>\n  )\n}\n\nexport default MergeSortCode\n","import React, { useEffect } from 'react'\nimport Prism from 'prismjs'\nimport './style.css'\nfunction HeapSortCode() {\n  useEffect(() => {\n    Prism.highlightAll();\n  })\n  return (\n    <div className =\"codeBlock\">\n      <hr/>\n      <h3>Code:</h3>\n      <pre>\n        <code className=\"language-javascript\">\n            {\n`//index i is the node of violation of the max-heap property\nfunction heapify(arr, n, i){\n  let largest = i;\n  let l = 2*i; //left child index\n  let r = 2*i+1; //right child index\n  if (l < n && arr[l] > arr[largest]){\n    largest = l;\n  }\n  if (r < n && arr[r] > arr[largest]){\n    largest = r;\n  }\n  if (i != largest){\n    let temp = arr[i];\n    arr[i] = arr[largest];\n    arr[largest] = temp;\n    heapify(arr, n, largest);\n  }\n}\n\nfunction heapSort(arr){\n  let length = arr.length;\n  //leaves are already max-heaps.  So start at 1 level above leaves.\n  for (let i = length/2-1; i>=0; i--){  \n    heapify(arr, length, i);\n  }\n  //Now arr is a max-heap, next we move the root to the last element and heapify 1 less element:\n  for (let i = length-1; i>0; i--){\n    //move largest to the end and run heapify.\n    let temp = arr[0];\n    arr[0] = arr[i];\n    arr[i] = temp;\n    //violation occurs at index 0 since this element was swapped\n    //also the size of the size is now i, since for each iteration, 1 element\n    //gets placed at the correct spot\n    heapify(arr, i, 0);\n  }\n}`\n          }\n        </code>\n      </pre>\n    </div>\n  )\n}\n\nexport default HeapSortCode\n","import React from 'react'\nimport SelectionSortCode from './SelectionSort'\nimport InsertionSortCode from './InsertionSortCode'\nimport BubbleSortCode from './BubbleSortCode'\nimport QuickSortCode from './QuickSortCode'\nimport MergeSortCode from './MergeSortCode'\nimport HeapSortCode from './HeapSortCode'\nimport HeapSort from '../../algorithms/HeapSort'\n\nfunction DisplayCode(props) {\n  const renderCode = ()=>{\n    //Fix the hr tag to be in a centered div.\n    switch (props.selectedAlgo) {\n      case 'Quick':\n        return (\n          <div>\n            <QuickSortCode />\n          </div>\n          \n        )\n      case 'Insertion':\n        return (\n          <div>\n            <InsertionSortCode />\n          </div>\n          \n        )\n      case 'Selection':\n        return (\n          <div>\n            <SelectionSortCode />\n          </div>\n          \n        )\n      case 'Merge':\n        return (\n          <div>\n            <MergeSortCode />\n          </div>\n          \n        )\n      case 'Bubble':\n        return (\n          <div>\n            <BubbleSortCode />\n          </div>\n          \n        )\n      case 'Heap':\n        return (\n          <div>\n            <HeapSortCode />\n          </div>\n          \n        )\n      default:\n        return null\n    }\n  }\n  return (\n    <div>\n      {renderCode()}\n    </div>\n  )\n}\n\nexport default DisplayCode\n","\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport React, { useState, useEffect, useRef } from 'react';\nimport Navbar from './components/Nav';\nimport VisualArea from './components/VisualArea'\nimport Controls from './components/Elements/Controls'\nimport RenderAlgoInfo from './components/AlgoDescription'\nimport SelectionSort, { SelectionSortKey } from './algorithms/SelectionSort'\nimport InsertionSort, { InsertionSortKey } from './algorithms/InsertionSort'\nimport QuickSort, { QuickSortKey } from './algorithms/QuickSort'\nimport BubbleSort, { BubbleSortKey } from './algorithms/BubbleSort'\nimport HeapSort, { HeapSortKey } from './algorithms/HeapSort'\nimport MergeSort, { MergeSortKey } from './algorithms/MergeSort'\nimport ColorKey from './components/Elements/ColorKey'\nimport DisplayCode from './components/AlgoCodeBlocks'\n\n\nfunction App() {\n  const ALGO_KEY = {\n    'Selection': SelectionSortKey,\n    'Quick': QuickSortKey,\n    'Merge': MergeSortKey,\n    'Heap': HeapSortKey,\n    'Insertion': InsertionSortKey,\n    'Bubble': BubbleSortKey\n  }\n  const [selectedSort, setSelectedSort] = useState(true);\n  // const [selectedSearch, setSelectedSearch] = useState(false)\n  const [size, setSize] = useState(10);\n  const [visState, setVisState] = useState(null);\n  const [selectedAlgo, setSelectedAlgo] = useState(null);\n  const [algoActions, setAlgoActions] = useState(null);\n  const [progress, setProgress] = useState(0);\n  const [timeoutIds, setTimeoutIds] = useState([]);\n  const [speed, setSpeed] = useState(1)\n  const currentStep = useRef(-1);\n  console.log('here is algo actions', algoActions)\n  const runAlgo = (state)=>{  \n    const toIds = [];\n    const timer = 500/speed;\n    let length = state.length;\n    state.forEach((item, i)=>{\n      let timeoutId = setTimeout(()=>{\n        setVisState(item);\n        currentStep.current = currentStep.current+1;\n        setProgress(((currentStep.current+1)/length)*100);\n      }, timer*i)\n      toIds.push(timeoutId);\n    });\n    let timeoutId = setTimeout(()=>{\n      pause();  \n    }, length*timer)\n    toIds.push(timeoutId);\n    setTimeoutIds(toIds);\n   \n  }\n  const pause = () =>{\n    timeoutIds.forEach((id) =>{\n      clearTimeout(id);\n    })\n    setTimeoutIds([]);\n  }\n  const resume = ()=>{\n    let newState = algoActions.slice(currentStep.current);\n    runAlgo(newState);\n  }\n  const stepForward = () =>{\n    if (currentStep.current < algoActions.length-1){\n      currentStep.current = currentStep.current + 1;\n      setVisState(algoActions[currentStep.current])\n    }\n    let length = algoActions.length;\n    setProgress(((currentStep.current+1)/length)*100);\n  }\n  const stepBackward = ()=>{\n    if (currentStep.current > 0 && currentStep.current < algoActions.length -1){\n      currentStep.current = currentStep.current-1;\n      setVisState(algoActions[currentStep.current])\n    }\n    let length = algoActions.length;\n    setProgress(((currentStep.current-1)/length)*100);\n  }\n  const setSortTrue = () => {\n    setSelectedSort(true);\n  }\n\n  const generateArray = (size) => {\n    const array = Array(size).fill(0).map(() => {\n      return Math.floor(Math.random() * 5 * size) + 1;\n    })\n    return array;\n  }\n  const algoSelect = (e) => {\n    setSelectedAlgo(e.target.innerText);\n    pause();\n    currentStep.current = -1;\n    setProgress(0);\n  }\n  const repeat = ()=>{\n    timeoutIds.forEach((id)=>{\n      clearTimeout(id);\n    });\n    currentStep.current = -1;\n    runAlgo(algoActions)\n  }\n  const speedSelect = (e) => {\n    setSpeed(parseFloat(e.target.innerText.slice(0, -1)));\n  }\n  useEffect(()=>{\n    let state;\n    if (selectedAlgo){\n      switch (selectedAlgo){\n        case 'Selection':\n          state = SelectionSort(generateArray(size));\n          break;\n        case 'Insertion':\n          state = InsertionSort(generateArray(size));\n          break;\n        case 'Bubble':\n          state = BubbleSort(generateArray(size));\n          break;\n        case 'Quick':\n          state = QuickSort(generateArray(size));\n          break;\n        case 'Heap':\n          state = HeapSort(generateArray(size));\n          break;\n        case 'Merge':\n          state = MergeSort(generateArray(size));\n          break;\n      }\n      setAlgoActions(state);\n      setVisState(state[0]);\n    }\n  }, [size, selectedAlgo])\n  const colorKey = ALGO_KEY[selectedAlgo];\n  return (\n    <div className=\"App\">\n      <Navbar fixed=\"top\" selectedAlgo={algoSelect} size={size} sortSelect={selectedSort} setSize={setSize} setSort={setSortTrue} />\n      <VisualArea data = {visState} progress = {progress}/>\n      <Controls \n      currentSpeed = {speed} \n      speedSelectStatus = {currentStep.current >=0}\n      speedSelect = {speedSelect} \n      repeat = {repeat} \n      playing = {timeoutIds ? timeoutIds.length > 0 : false} \n      play = {()=>{runAlgo(algoActions)}} \n      resume={resume} \n      pause={pause} step = {currentStep.current}\n      playDisabled ={algoActions ? algoActions.length <= 0 || currentStep.current >= algoActions.length - 1 : true}\n      forward = {stepForward}\n      backward = {stepBackward}\n      forwardStatus = {algoActions ? currentStep.current < algoActions.length-1 : false}\n      backwardStatus = {algoActions ? currentStep.current > 0 && currentStep.current < algoActions.length-1 : false }\n      pickedAlgo = {selectedAlgo ? true : false}\n      />\n      <ColorKey colorKey={colorKey}/>\n      <RenderAlgoInfo selectedAlgo={selectedAlgo}/>\n      \n      <DisplayCode selectedAlgo={selectedAlgo} />\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}